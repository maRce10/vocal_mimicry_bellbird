cs <- cs[cs$check.res %in% c("sound file not found", "OK"),]
table(cs$check.res)
unique(cs$sound.files[cs$check.res != "OK"])
sels$`Model species`[grep("Procnias", sels$`Model species`)] <- "Procnias tricarunculatus"
sels$`Model species`[grep("glossus", sels$`Model species`)] <- "Pteroglossus torquatus"
sels$`Model species`[grep("Ramphastos", sels$`Model species`)] <- "Ramphastos sulfuratus"
sels$source <-sels$Recording
sels$source[grep("cal$", sels$source)] <- "mimetic_bellbird"
sels$source[sels$source == ""] <- "mimetic_bellbird"
sels$source[grep("Procnias", sels$source)] <- "Procnias tricarunculatus"
sels$source[grep("Ramphastos", sels$source)] <- "Ramphastos sulfuratus"
sels$`Model species`[sels$sound.files == "Grab2-4.7.2020.wav"] <- "Procnias tricarunculatus"
sels$source[sels$sound.files == "Grab2-4.7.2020.wav"] <-  "mimetic_bellbird"
sels$Vocalization[sels$sound.files == "Grab2-4.7.2020.wav"] <-  "babbling"
sels$Vocalization[grep("gres", sels$Vocalization)] <- "aggresive"
sels$Vocalization[grep("Talama", sels$Vocalization)] <- "Talamancan"
sels$Vocalization[sels$sound.files == "Procnias-tricarunculatus-476248.wav"] <-  "Monteverde"
sels$Vocalization[grep("Ptero", sels$Vocalization)] <- NA
sels$Song[sels$Vocalization %in% 1:3] <- sels$Vocalization[sels$Vocalization %in% 1:3]
table(sels$source)
table(sels$Vocalization)
# write.csv(sels, "./data/processed/pooled_annotations.csv", row.names = FALSE)
# write.csv(data.frame(missing = unique(cs$sound.files[cs$check.res != "OK"])), "./data/processed/missing_sound_files.csv", row.names = FALSE)
table(sels$source)
table(sels$Vocalization)
table(sels$Vocalization, sels$source)
table(sels$`Model species`, sels$source)
sels$`Model species`[grep("mimetic", sels$source)]
sels$`Model species`[grepl("mimetic", sels$source) & sels$`Model species` == ""]
sels[grepl("mimetic", sels$source) & sels$`Model species` == "", ]
View(sels)
unique(sels$sound.files)
unique(sels$source)
unique(sels$sound.files[sels$source == "mimetic_bellbird"])
sound.files <- unique(sels$sound.files[sels$source == "mimetic_bellbird"])
write.csv(data.frame(sound.files, date = "", time = "", site = "Laguna Hule"), "./data/raw/recording_dates.csv", row.names = FALSE)
table(sels$Vocalization, sels$source)
sels$Vocalization[grep("abblin", sels$Vocal)]
sels$Vocalization[grep("abblin", sels$Vocal)] <-  "babbling"
table(sels$source)
table(sels$Vocalization)
table(sels$Vocalization, sels$source)
View(sels)
sels$source[sels$source %in% 1:3]
sels$source[grep("1|2|3", sels$source)]
sels$Vocalization[grep("1|2|3", sels$Vocalization)]
sels$Vocalization[grep("1|2|3", sels$Vocalization)] <-  ""
table(sels$Vocalization, sels$source)
View(sels)
sels$Vocalization[grep("Pteroglossus", sels$Vocal)] <- NA
table(sels$Vocalization, sels$source)
sels$Vocalization[grep("abblin", sels$Vocalization)] <-  "babbling"
sels$Vocalization[grep("Pteroglossus", sels$Vocalization)] <- NA
table(sels$Vocalization, sels$source)
sels$Vocalization[grep("Pteroglossus", sels$Vocalization)]
sels$Vocalization[grep("Pteroglossus", sels$source)]
sels$Vocalization[grep("Pteroglossus", sels$source)] <- NA
table(sels$Vocalization, sels$source)
sels$source[sels$Vocalization == ""]
sels$source[sels$Vocalization == "" & !is.na(sels$source)]
sels$source[sels$Vocalization == "" & !is.na(sels$Vocalization)]
table(sels$Vocalization, sels$source)
sels$`Model species`[sels$Vocalization == "" & !is.na(sels$Vocalization)]
sels$`Model species`[sels$Vocalization == "" & !is.na(sels$Vocalization)]
sels$Vocalization[sels$Vocalization == "" & !is.na(sels$Vocalization)] <- sels$`Model species`[sels$Vocalization == "" & !is.na(sels$Vocalization)]
table(sels$Vocalization, sels$source)
sels$Vocalization[sels$Vocalization == "" & !is.na(sels$Vocalization)]
sels[sels$Vocalization == "" & !is.na(sels$Vocalization),]
View(sels)
sf <- list.files("./data/processed/Selections", full.names = TRUE)
dat <- sapply(sf, function(x) read.table(x, sep = "\t"))
ncl <- sapply(dat, ncol)
names(ncl[ncl > 14])
sels1 <- imp_raven(path = "./data/processed/Selections", warbler.format = TRUE, files = basename(names(ncl[ncl < 14])), all.data = TRUE)
sels2 <- imp_raven(path = "./data/processed/Selections", warbler.format = TRUE, files = basename(names(ncl[ncl == 14])), all.data = TRUE)
sels2$Song <- ifelse(is.na(sels2$Song), sels2$Canto,
sels2$Song)
sels2$Song <- ifelse(is.na(sels2$Song), sels2$Soong,
sels2$Song)
sels2$Soong <- sels2$Canto <- NULL
sels1$Song <- NA
names(sels1)
names(sels2)
sels <- rbind(sels1, sels2)
sels$sound.files <- gsub("Nueva-grabacio?", "Nueva-grabació", sels$sound.files, fixed = TRUE)
# cns_data <- consolidate(path = "./data/raw/recordings", parallel = 10)
cs <- check_sels(X = sels, path = "./data/raw/recordings/consolidated_files")
cs <- cs[cs$check.res %in% c("sound file not found", "OK"),]
table(cs$check.res)
unique(cs$sound.files[cs$check.res != "OK"])
sels$`Model species`[grep("Procnias", sels$`Model species`)] <- "Procnias tricarunculatus"
sels$`Model species`[grep("glossus", sels$`Model species`)] <- "Pteroglossus torquatus"
sels$`Model species`[grep("Ramphastos", sels$`Model species`)] <- "Ramphastos sulfuratus"
sels$source <-sels$Recording
sels$source[grep("cal$", sels$source)] <- "mimetic_bellbird"
sels$source[sels$source == ""] <- "mimetic_bellbird"
sels$source[grep("Procnias", sels$source)] <- "Procnias tricarunculatus"
sels$source[grep("Ramphastos", sels$source)] <- "Ramphastos sulfuratus"
sels$`Model species`[sels$sound.files == "Grab2-4.7.2020.wav"] <- "Procnias tricarunculatus"
sels$source[sels$sound.files == "Grab2-4.7.2020.wav"] <-  "mimetic_bellbird"
sels$Vocalization[sels$sound.files == "Grab2-4.7.2020.wav"] <-  "babbling"
sels$Vocalization[grep("1|2|3", sels$Vocalization)] <-  ""
sels$Vocalization[grep("gres", sels$Vocalization)] <- "aggresive"
sels$Vocalization[grep("Talama", sels$Vocalization)] <- "Talamancan"
sels$Vocalization[sels$sound.files == "Procnias-tricarunculatus-476248.wav"] <-  "Monteverde"
sels$Vocalization[grep("Ptero", sels$Vocalization)] <- NA
sels$Song[sels$Vocalization %in% 1:3] <- sels$Vocalization[sels$Vocalization %in% 1:3]
sels$Vocalization[grep("abblin", sels$Vocalization)] <-  "babbling"
sels$Vocalization[grep("Pteroglossus", sels$source)] <- NA
sels$Vocalization[sels$Vocalization == "" & !is.na(sels$Vocalization)] <- sels$`Model species`[sels$Vocalization == "" & !is.na(sels$Vocalization)]
sels[sels$Vocalization == "" & !is.na(sels$Vocalization),]
table(sels$source)
table(sels$Vocalization)
table(sels$Vocalization, sels$source)
# table(sels$`Model species`, sels$source)
# sels[grepl("mimetic", sels$source) & sels$`Model species` == "", ]
# write.csv(sels, "./data/processed/pooled_annotations.csv", row.names = FALSE)
# write.csv(data.frame(missing = unique(cs$sound.files[cs$check.res != "OK"])), "./data/processed/missing_sound_files.csv", row.names = FALSE)
table(sels$`Model species`, sels$source)
write.csv(sels, "./data/processed/pooled_annotations.csv", row.names = FALSE)
warbleR_options(wav.path = "./data/raw/recordings/consolidated_files")
sels <- read.csv("./data/processed/pooled_annotations.csv")
check_sels(sels)
table(cs)
table(cs$check.res)
cs <- check_sels(sels)
table(cs$check.res)
cs <- check_sels(X = sels, path = "./data/raw/recordings/consolidated_files")
sf <- list.files("./data/processed/Selections", full.names = TRUE)
dat <- sapply(sf, function(x) read.table(x, sep = "\t"))
ncl <- sapply(dat, ncol)
names(ncl[ncl > 14])
sels1 <- imp_raven(path = "./data/processed/Selections", warbler.format = TRUE, files = basename(names(ncl[ncl < 14])), all.data = TRUE)
sels2 <- imp_raven(path = "./data/processed/Selections", warbler.format = TRUE, files = basename(names(ncl[ncl == 14])), all.data = TRUE)
sels2$Song <- ifelse(is.na(sels2$Song), sels2$Canto,
sels2$Song)
sels2$Song <- ifelse(is.na(sels2$Song), sels2$Soong,
sels2$Song)
sels2$Soong <- sels2$Canto <- NULL
sels1$Song <- NA
names(sels1)
names(sels2)
sels <- rbind(sels1, sels2)
sels$sound.files <- gsub("Nueva-grabacio?", "Nueva-grabació", sels$sound.files, fixed = TRUE)
cs <- check_sels(X = sels, path = "./data/raw/recordings/consolidated_files")
cs <- cs[cs$check.res %in% c("sound file not found", "OK"),]
table(cs$check.res)
unique(cs$sound.files[cs$check.res != "OK"])
sf <- list.files("./data/processed/Selections", full.names = TRUE)
dat <- sapply(sf, function(x) read.table(x, sep = "\t"))
ncl <- sapply(dat, ncol)
names(ncl[ncl > 14])
sels1 <- imp_raven(path = "./data/processed/Selections", warbler.format = TRUE, files = basename(names(ncl[ncl < 14])), all.data = TRUE)
sels2 <- imp_raven(path = "./data/processed/Selections", warbler.format = TRUE, files = basename(names(ncl[ncl == 14])), all.data = TRUE)
sels2$Song <- ifelse(is.na(sels2$Song), sels2$Canto,
sels2$Song)
sels2$Song <- ifelse(is.na(sels2$Song), sels2$Soong,
sels2$Song)
sels2$Soong <- sels2$Canto <- NULL
sels1$Song <- NA
names(sels1)
names(sels2)
sels <- rbind(sels1, sels2)
sels$sound.files <- gsub("Nueva-grabacio?", "Nueva-grabació", sels$sound.files, fixed = TRUE)
# cns_data <- consolidate(path = "./data/raw/recordings", parallel = 10)
cs <- check_sels(X = sels, path = "./data/raw/recordings/consolidated_files")
cs <- cs[cs$check.res %in% c("sound file not found", "OK"),]
table(cs$check.res)
unique(cs$sound.files[cs$check.res != "OK"])
sels$`Model species`[grep("Procnias", sels$`Model species`)] <- "Procnias tricarunculatus"
sels$`Model species`[grep("glossus", sels$`Model species`)] <- "Pteroglossus torquatus"
sels$`Model species`[grep("Ramphastos", sels$`Model species`)] <- "Ramphastos sulfuratus"
sels$source <-sels$Recording
sels$source[grep("cal$", sels$source)] <- "mimetic_bellbird"
sels$source[sels$source == ""] <- "mimetic_bellbird"
sels$source[grep("Procnias", sels$source)] <- "Procnias tricarunculatus"
sels$source[grep("Ramphastos", sels$source)] <- "Ramphastos sulfuratus"
sels$`Model species`[sels$sound.files == "Grab2-4.7.2020.wav"] <- "Procnias tricarunculatus"
sels$source[sels$sound.files == "Grab2-4.7.2020.wav"] <-  "mimetic_bellbird"
sels$Vocalization[sels$sound.files == "Grab2-4.7.2020.wav"] <-  "babbling"
sels$Vocalization[grep("1|2|3", sels$Vocalization)] <-  ""
sels$Vocalization[grep("gres", sels$Vocalization)] <- "aggresive"
sels$Vocalization[grep("Talama", sels$Vocalization)] <- "Talamancan"
sels$Vocalization[sels$sound.files == "Procnias-tricarunculatus-476248.wav"] <-  "Monteverde"
sels$Vocalization[grep("Ptero", sels$Vocalization)] <- NA
sels$Song[sels$Vocalization %in% 1:3] <- sels$Vocalization[sels$Vocalization %in% 1:3]
sels$Vocalization[grep("abblin", sels$Vocalization)] <-  "babbling"
sels$Vocalization[grep("Pteroglossus", sels$source)] <- NA
sels$Vocalization[sels$Vocalization == "" & !is.na(sels$Vocalization)] <- sels$`Model species`[sels$Vocalization == "" & !is.na(sels$Vocalization)]
sels[sels$Vocalization == "" & !is.na(sels$Vocalization),]
table(sels$source)
table(sels$Vocalization)
table(sels$Vocalization, sels$source)
table(sels$`Model species`, sels$source)
# sels[grepl("mimetic", sels$source) & sels$`Model species` == "", ]
write.csv(sels, "./data/processed/pooled_annotations.csv", row.names = FALSE)
# write.csv(data.frame(missing = unique(cs$sound.files[cs$check.res != "OK"])), "./data/processed/missing_sound_files.csv", row.names = FALSE)
sels <- read.csv("./data/processed/pooled_annotations.csv")
cs <- check_sels(sels)
table(cs$check.res)
cs <- check_sels(X = sels, path = "./data/raw/recordings/consolidated_files")
cs <- cs[cs$check.res %in% c("sound file not found", "OK"),]
table(cs$check.res)
cs <- check_sels(X = sels, path = "./data/raw/recordings/consolidated_files")
unique(cs$sound.files[cs$check.res != "OK"])
sf <- list.files("./data/processed/Selections", full.names = TRUE)
dat <- sapply(sf, function(x) read.table(x, sep = "\t"))
ncl <- sapply(dat, ncol)
names(ncl[ncl > 14])
sels1 <- imp_raven(path = "./data/processed/Selections", warbler.format = TRUE, files = basename(names(ncl[ncl < 14])), all.data = TRUE)
sels2 <- imp_raven(path = "./data/processed/Selections", warbler.format = TRUE, files = basename(names(ncl[ncl == 14])), all.data = TRUE)
sels2$Song <- ifelse(is.na(sels2$Song), sels2$Canto,
sels2$Song)
sels2$Song <- ifelse(is.na(sels2$Song), sels2$Soong,
sels2$Song)
sels2$Soong <- sels2$Canto <- NULL
sels1$Song <- NA
names(sels1)
names(sels2)
sels <- rbind(sels1, sels2)
sels$sound.files <- gsub("Nueva-grabacio?", "Nueva-grabació", sels$sound.files, fixed = TRUE)
# cns_data <- consolidate(path = "./data/raw/recordings", parallel = 10)
cs <- check_sels(X = sels, path = "./data/raw/recordings/consolidated_files")
cs <- cs[cs$check.res %in% c("sound file not found", "OK"),]
table(cs$check.res)
unique(cs$sound.files[cs$check.res != "OK"])
sels <- sels[cs$check.res == "OK", ]
sels$`Model species`[grep("Procnias", sels$`Model species`)] <- "Procnias tricarunculatus"
sels$`Model species`[grep("glossus", sels$`Model species`)] <- "Pteroglossus torquatus"
sels$`Model species`[grep("Ramphastos", sels$`Model species`)] <- "Ramphastos sulfuratus"
sels$source <-sels$Recording
sels$source[grep("cal$", sels$source)] <- "mimetic_bellbird"
sels$source[sels$source == ""] <- "mimetic_bellbird"
sels$source[grep("Procnias", sels$source)] <- "Procnias tricarunculatus"
sels$source[grep("Ramphastos", sels$source)] <- "Ramphastos sulfuratus"
sels$`Model species`[sels$sound.files == "Grab2-4.7.2020.wav"] <- "Procnias tricarunculatus"
sels$source[sels$sound.files == "Grab2-4.7.2020.wav"] <-  "mimetic_bellbird"
sels$Vocalization[sels$sound.files == "Grab2-4.7.2020.wav"] <-  "babbling"
sels$Vocalization[grep("1|2|3", sels$Vocalization)] <-  ""
sels$Vocalization[grep("gres", sels$Vocalization)] <- "aggresive"
sels$Vocalization[grep("Talama", sels$Vocalization)] <- "Talamancan"
sels$Vocalization[sels$sound.files == "Procnias-tricarunculatus-476248.wav"] <-  "Monteverde"
sels$Vocalization[grep("Ptero", sels$Vocalization)] <- NA
sels$Song[sels$Vocalization %in% 1:3] <- sels$Vocalization[sels$Vocalization %in% 1:3]
sels$Vocalization[grep("abblin", sels$Vocalization)] <-  "babbling"
sels$Vocalization[grep("Pteroglossus", sels$source)] <- NA
sels$Vocalization[sels$Vocalization == "" & !is.na(sels$Vocalization)] <- sels$`Model species`[sels$Vocalization == "" & !is.na(sels$Vocalization)]
sels[sels$Vocalization == "" & !is.na(sels$Vocalization),]
table(sels$source)
table(sels$Vocalization)
table(sels$Vocalization, sels$source)
table(sels$`Model species`, sels$source)
# sels[grepl("mimetic", sels$source) & sels$`Model species` == "", ]
write.csv(sels, "./data/processed/pooled_annotations.csv", row.names = FALSE)
# write.csv(data.frame(missing = unique(cs$sound.files[cs$check.res != "OK"])), "./data/processed/missing_sound_files.csv", row.names = FALSE)
sels <- read.csv("./data/processed/pooled_annotations.csv")
cs <- check_sels(sels)
cs$check.res
sf <- list.files("./data/processed/Selections", full.names = TRUE)
dat <- sapply(sf, function(x) read.table(x, sep = "\t"))
ncl <- sapply(dat, ncol)
names(ncl[ncl > 14])
sels1 <- imp_raven(path = "./data/processed/Selections", warbler.format = TRUE, files = basename(names(ncl[ncl < 14])), all.data = TRUE)
sels2 <- imp_raven(path = "./data/processed/Selections", warbler.format = TRUE, files = basename(names(ncl[ncl == 14])), all.data = TRUE)
sels2$Song <- ifelse(is.na(sels2$Song), sels2$Canto,
sels2$Song)
sels2$Song <- ifelse(is.na(sels2$Song), sels2$Soong,
sels2$Song)
sels2$Soong <- sels2$Canto <- NULL
sels1$Song <- NA
names(sels1)
names(sels2)
sels <- rbind(sels1, sels2)
sels$sound.files <- gsub("Nueva-grabacio?", "Nueva-grabació", sels$sound.files, fixed = TRUE)
# cns_data <- consolidate(path = "./data/raw/recordings", parallel = 10)
cs <- check_sels(X = sels, path = "./data/raw/recordings/consolidated_files")
# cs <- cs[cs$check.res %in% c("sound file not found", "OK"),]
#
# table(cs$check.res)
#
# unique(cs$sound.files[cs$check.res != "OK"])
sels <- sels[cs$check.res == "OK", ]
sels$`Model species`[grep("Procnias", sels$`Model species`)] <- "Procnias tricarunculatus"
sels$`Model species`[grep("glossus", sels$`Model species`)] <- "Pteroglossus torquatus"
sels$`Model species`[grep("Ramphastos", sels$`Model species`)] <- "Ramphastos sulfuratus"
sels$source <-sels$Recording
sels$source[grep("cal$", sels$source)] <- "mimetic_bellbird"
sels$source[sels$source == ""] <- "mimetic_bellbird"
sels$source[grep("Procnias", sels$source)] <- "Procnias tricarunculatus"
sels$source[grep("Ramphastos", sels$source)] <- "Ramphastos sulfuratus"
sels$`Model species`[sels$sound.files == "Grab2-4.7.2020.wav"] <- "Procnias tricarunculatus"
sels$source[sels$sound.files == "Grab2-4.7.2020.wav"] <-  "mimetic_bellbird"
sels$Vocalization[sels$sound.files == "Grab2-4.7.2020.wav"] <-  "babbling"
sels$Vocalization[grep("1|2|3", sels$Vocalization)] <-  ""
sels$Vocalization[grep("gres", sels$Vocalization)] <- "aggresive"
sels$Vocalization[grep("Talama", sels$Vocalization)] <- "Talamancan"
sels$Vocalization[sels$sound.files == "Procnias-tricarunculatus-476248.wav"] <-  "Monteverde"
sels$Vocalization[grep("Ptero", sels$Vocalization)] <- NA
sels$Song[sels$Vocalization %in% 1:3] <- sels$Vocalization[sels$Vocalization %in% 1:3]
sels$Vocalization[grep("abblin", sels$Vocalization)] <-  "babbling"
sels$Vocalization[grep("Pteroglossus", sels$source)] <- NA
sels$Vocalization[sels$Vocalization == "" & !is.na(sels$Vocalization)] <- sels$`Model species`[sels$Vocalization == "" & !is.na(sels$Vocalization)]
sels[sels$Vocalization == "" & !is.na(sels$Vocalization),]
table(sels$source)
table(sels$Vocalization)
table(sels$Vocalization, sels$source)
table(sels$`Model species`, sels$source)
# sels[grepl("mimetic", sels$source) & sels$`Model species` == "", ]
write.csv(sels, "./data/processed/pooled_annotations.csv", row.names = FALSE)
# write.csv(data.frame(missing = unique(cs$sound.files[cs$check.res != "OK"])), "./data/processed/missing_sound_files.csv", row.names = FALSE)
sels <- read.csv("./data/processed/pooled_annotations.csv")
cs <- check_sels(sels)
table(cs$check.res)
spectrograms(sels[1:100, ], fast.spec = TRUE, flim = c(0, 10), wl = 512, ovlp = 50, parallel = 10, dest.path = ".data/processed/spectrograms")
spectrograms(sels[1:100, ], fast.spec = TRUE, flim = c(0, 10), wl = 512, ovlp = 50, parallel = 10, dest.path = "./data/processed/spectrograms")
table(sels$Song)
spectrograms(sels[1:100, ], fast.spec = TRUE, flim = c(0, 10), wl = 512, ovlp = 50, parallel = 10, dest.path = "./data/processed/spectrograms", by.song = "Song")
spectrograms(sels[1:100, ], fast.spec = TRUE, flim = c(0, 10), wl = 512, ovlp = 50, parallel = 10, dest.path = "./data/processed/spectrograms", by.song = "Song")
spectrograms(sels, fast.spec = TRUE, flim = c(0, 10), wl = 512, ovlp = 50, parallel = 10, dest.path = "./data/processed/spectrograms")
head(sels)
## add 'developer/' to packages to be installed from github
x <- c("remotes", "maRce10/warbleR", "Rraven", "viridis", "ggplot2", "knitr", "kableExtra", "formatR", "ranger", "tuneRanger", "soundgen", "smacof", "caret")
aa <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
opts_knit$set(root.dir = "..")
extract_proximity_oob <- function(fit, olddata) {
pred = predict(fit, olddata, type = "terminalNodes")$predictions
prox = matrix(NA, nrow(pred), nrow(pred))
ntree = ncol(pred)
n = nrow(prox)
if (is.null(fit$inbag.counts)) {
stop("call ranger with keep.inbag = TRUE")
}
# Get inbag counts
inbag = simplify2array(fit$inbag.counts)
for (i in 1:n) {
for (j in 1:n) {
# Use only trees where both obs are OOB
tree_idx = inbag[i, ] == 0 & inbag[j, ] == 0
prox[i, j] = sum(pred[i, tree_idx] == pred[j, tree_idx]) / sum(tree_idx)
}
}
return(prox)
}
extract_proximity_oob <- function(fit, olddata) {
pred = predict(fit, olddata, type = "terminalNodes")$predictions
prox = matrix(NA, nrow(pred), nrow(pred))
ntree = ncol(pred)
n = nrow(prox)
if (is.null(fit$inbag.counts)) {
stop("call ranger with keep.inbag = TRUE")
}
# Get inbag counts
inbag = simplify2array(fit$inbag.counts)
for (i in 1:n) {
for (j in 1:n) {
# Use only trees where both obs are OOB
tree_idx = inbag[i, ] == 0 & inbag[j, ] == 0
prox[i, j] = sum(pred[i, tree_idx] == pred[j, tree_idx]) / sum(tree_idx)
}
}
return(prox)
}
attach(readRDS("./data/processed/random_forest_model_and_mds.RDS"))
getwd()
sp_param <- read.csv("acoustic_parameters_model_and_mimetic.csv")
model_sp_param <- sp_param[grep("mimetic", sp_param$species.vocalization, invert = TRUE), ]
# remove babbling due to low sample size (16)
model_sp_param <- model_sp_param[model_sp_param$species.vocalization != "P.tricarunculatus-babbling", ]
# tune random forest
rf_task <- makeClassifTask(data = model_sp_param[, -c(1, 2)], target = "species.vocalization")
# Estimate runtime
estimateTimeTuneRanger(rf_task)
# Tuning
tuning.results <- tuneRanger(rf_task, measure = list(multiclass.brier), num.trees = 10000, num.threads = 10, iters = 1000, save.file.path = NULL, show.info = FALSE)
# Model with the new tuned hyperparameters
rf <- ranger(as.factor(species.vocalization) ~ ., data = model_sp_param[, -c(1, 2)], num.trees = 10000, importance = "impurity", keep.inbag = TRUE, mtry = tuning.results$recommended.pars$mtry, min.node.size = tuning.results$recommended.pars$min.node.size, sample.fraction = tuning.results$recommended.pars$sample.fraction)
rf$prediction.error
prx.mat <- extract_proximity_oob(fit = rf, olddata = model_sp_param)
diss <- dist(t(prx.mat))   ## Euclidean distances
fit <- mds(diss, ndim = 2)        ## 2D interval MDS
set.seed(123)
rf.mds <- bootmds(fit, prx.mat, method.dat = "euclidean", nrep = 50)
saveRDS(list(rf = rf, rf.mds = rf.mds, labels =  model_sp_param$species.vocalization), "./data/processed/random_forest_model_and_mds.RDS")
attach(readRDS("./data/processed/random_forest_model_and_mds.RDS"))
mds.shp <- data.frame(species.vocalization = labels, rf.mds$conf, stringsAsFactors = FALSE)
ggplot(mds.shp, aes(x = D1, y = D2, color = species.vocalization, shape = species.vocalization)) +
geom_point(size = 7)+
# scale_shape_manual(values = c(15, 19)) +
# scale_color_manual(values = viridis(10, alpha = 0.6)[c(4, 8)]) +
theme_classic() +
labs(x = "Dimension 1", y = "Dimension 2", color = "Leaf type", shape = "Leaf type") +
theme(text = element_text(size=20), legend.position = c(0.15, 0.9),  legend.text = element_text(face="italic"))
rf.mds.boot <- rf.mds
rf.mds <- cmdscale(prx.mat, k = 2)
rf.mds <- cmdscale(prx.mat, k = 2)
saveRDS(list(rf = rf, rf.mds.boot = rf.mds.boot, rf.mds = rf.mds, labels =  model_sp_param$species.vocalization), "./data/processed/random_forest_model_and_mds.RDS")
mds.shp.boot <- data.frame(species.vocalization = labels, rf.mds.boot$conf, stringsAsFactors = FALSE)
ggplot(mds.shp.boot, aes(x = D1, y = D2, color = species.vocalization, shape = species.vocalization)) +
geom_point(size = 7)+
# scale_shape_manual(values = c(15, 19)) +
# scale_color_manual(values = viridis(10, alpha = 0.6)[c(4, 8)]) +
theme_classic() +
labs(x = "Dimension 1", y = "Dimension 2", color = "Leaf type", shape = "Leaf type") +
theme(text = element_text(size=20), legend.position = c(0.15, 0.9),  legend.text = element_text(face="italic"))
rf.mds
str(mds.shp.boot)
mds.shp <- data.frame(species.vocalization = labels, rf.mds, stringsAsFactors = FALSE)
ggplot(mds.shp, aes(x = D1, y = D2, color = species.vocalization, shape = species.vocalization)) +
geom_point(size = 7)+
# scale_shape_manual(values = c(15, 19)) +
# scale_color_manual(values = viridis(10, alpha = 0.6)[c(4, 8)]) +
theme_classic() +
labs(x = "Dimension 1", y = "Dimension 2", color = "Leaf type", shape = "Leaf type") +
theme(text = element_text(size=20), legend.position = c(0.15, 0.9),  legend.text = element_text(face="italic"))
names(mds.shp)
ggplot(mds.shp, aes(x = X1, y = X2, color = species.vocalization, shape = species.vocalization)) +
geom_point(size = 7)+
# scale_shape_manual(values = c(15, 19)) +
# scale_color_manual(values = viridis(10, alpha = 0.6)[c(4, 8)]) +
theme_classic() +
labs(x = "Dimension 1", y = "Dimension 2", color = "Leaf type", shape = "Leaf type") +
theme(text = element_text(size=20), legend.position = c(0.15, 0.9),  legend.text = element_text(face="italic"))
mimetic_sp_param <- sp_param[grep("mimetic", sp_param$species.vocalization), ]
mimetic_sp_param$pred.class <- as.character(predict(object = rf, data = mimetic_sp_param)$predictions)
table(mimetic_sp_param$pred.class)
table(mimetic_sp_param$species.vocalization)
table(mimetic_sp_param$pred.class, mimetic_sp_param$species.vocalization)
mimetic_no_calls <- mimetic_sp_param[!mimetic_sp_param$species.vocalization %in% c("mimetic_P.tricarunculatus-babbling", "mimetic_P.tricarunculatus-aggresive", "mimetic_P.tricarunculatus-whistle"), ]
mimetic_no_calls$pred.class[grep("tricarun", mimetic_no_calls$pred.class)] <- "P.tricarunculatus"
table(mimetic_no_calls$pred.class, mimetic_no_calls$species.vocalization)
mimetic_no_calls$pred.class[grep("montezuma", mimetic_no_calls$pred.class)] <- mimetic_no_calls$species.vocalization[grep("montezuma", mimetic_no_calls$species.vocalization)] <- "P.montezuma"
mimetic_no_calls$pred.class[grep("torquatus", mimetic_no_calls$pred.class)] <- mimetic_no_calls$species.vocalization[grep("torquatus", mimetic_no_calls$species.vocalization)] <- "P.torquatus"
mimetic_no_calls$pred.class[grep("sulfuratus", mimetic_no_calls$pred.class)] <- mimetic_no_calls$species.vocalization[grep("sulfuratus", mimetic_no_calls$species.vocalization)] <- "R.sulfuratus"
mimetic_no_calls$pred.class[grep("tricarunculatus", mimetic_no_calls$pred.class)] <- mimetic_no_calls$species.vocalization[grep("tricarunculatus", mimetic_no_calls$species.vocalization)] <- "P.tricarunculatus"
confusionMatrix(data = as.factor(mimetic_no_calls$pred.class), reference = as.factor(mimetic_no_calls$species.vocalization))
# remotes::install_github("rlesur/klippy")
# github packages must include user name ("user/package")
pkgs <- c("rlesur/klippy", "kableExtra", "knitr", "formatR")
# install/ load packages
out <- lapply(pkgs, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
a <- try(require(pkg, character.only = T), silent = T)
if (!a) remove.packages(pkg)
})
table(mimetic_sp_param$pred.class)
table(mimetic_sp_param$species.vocalization)
table(mimetic_sp_param$pred.class, mimetic_sp_param$species.vocalization)
file.copy(file.path(R.home("doc"), "html", "logo.jpg"), '.')
getwd()
attach(readRDS("./data/processed/random_forest_model_and_mds.RDS"))
mds.shp.boot <- data.frame(species.vocalization = labels, rf.mds.boot$conf, stringsAsFactors = FALSE)
ggplot(mds.shp.boot, aes(x = D1, y = D2, color = species.vocalization, shape = species.vocalization)) +
geom_point(size = 7)+
scale_color_viridis_d() +
theme_classic() +
labs(title = "Bootstrapped MDS", x = "Dimension 1", y = "Dimension 2", color = "Leaf type", shape = "Leaf type") +
theme(text = element_text(size=20), legend.position = c(0.15, 0.9),  legend.text = element_text(face="italic"))
mds.shp <- data.frame(species.vocalization = labels, rf.mds, stringsAsFactors = FALSE)
names(mds.shp)
ggplot(mds.shp, aes(x = X1, y = X2, color = species.vocalization, shape = species.vocalization)) +
geom_point(size = 7)+
scale_color_viridis_d() +
theme_classic() +
labs(title = "Regular MDS", x = "Dimension 1", y = "Dimension 2", color = "Leaf type", shape = "Leaf type") +
theme(text = element_text(size=20), legend.text = element_text(face="italic"))
ggplot(mds.shp[mds.shp$X1 < 0.2, ], aes(x = X1, y = X2, color = species.vocalization, shape = species.vocalization)) +
geom_point(size = 7)+
scale_color_viridis_d() +
theme_classic() +
labs(title = "Regular MDS", x = "Dimension 1", y = "Dimension 2", color = "Leaf type", shape = "Leaf type") +
theme(text = element_text(size=20), legend.text = element_text(face="italic"))
ggplot(mds.shp[mds.shp$X1 < 0.2 & mds.shp$X2 < 0.2, ], aes(x = X1, y = X2, color = species.vocalization, shape = species.vocalization)) +
geom_point(size = 7)+
scale_color_viridis_d() +
theme_classic() +
labs(title = "Regular MDS", x = "Dimension 1", y = "Dimension 2", color = "Leaf type", shape = "Leaf type") +
theme(text = element_text(size=20), legend.text = element_text(face="italic"))
attach(readRDS("./data/processed/random_forest_model_and_mds.RDS"))
mds.shp.boot <- data.frame(species.vocalization = labels, rf.mds.boot$conf, stringsAsFactors = FALSE)
ggplot(mds.shp.boot, aes(x = D1, y = D2, color = species.vocalization, shape = species.vocalization)) +
geom_point(size = 7)+
scale_color_viridis_d() +
theme_classic() +
labs(title = "Bootstrapped MDS", x = "Dimension 1", y = "Dimension 2", color = "Leaf type", shape = "Leaf type") +
theme(text = element_text(size=20), legend.text = element_text(face="italic"))
mds.shp <- data.frame(species.vocalization = labels, rf.mds, stringsAsFactors = FALSE)
names(mds.shp)
ggplot(mds.shp[mds.shp$X1 < 0.2 & mds.shp$X2 < 0.2, ], aes(x = X1, y = X2, color = species.vocalization, shape = species.vocalization)) +
geom_point(size = 7)+
scale_color_viridis_d() +
theme_classic() +
labs(title = "Regular MDS", x = "Dimension 1", y = "Dimension 2", color = "Leaf type", shape = "Leaf type") +
theme(text = element_text(size=20), legend.text = element_text(face="italic"))
